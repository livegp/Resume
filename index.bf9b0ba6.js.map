{"mappings":"AACA,MAAMA,SAAW,CAACC,EAAUC,KAC1B,MAAMC,EAASC,SAASC,eAAeJ,GACrCK,EAAMF,SAASC,eAAeH,GAG5BC,GAAUG,GACZH,EAAOI,iBAAiB,SAAS,KAE/BD,EAAIE,UAAUL,OAAO,eACvB,EAGJH,SAAS,aAAc,YAEvB,MAAMS,QAAUL,SAASM,iBAAiB,cAE1C,SAASC,aACSP,SAASC,eAAe,YAEhCG,UAAUI,OAAO,YAC3B,CACAH,QAAQI,SAASC,GAAMA,EAAEP,iBAAiB,QAASI,cAEnDP,SAASW,cAAc,aAAaR,iBAAiB,SAAS,WAC5DH,SAASW,cAAc,WAAWP,UAAUL,OAAO,SACrD,IAEA,MAAMa,SAAWZ,SAASM,iBAAiB,eAE3C,SAASO,eACP,MAAMC,EAAUC,OAAOD,QACvBF,SAASH,SAASO,IAChB,MAAMC,EAAgBD,EAAQE,aACxBC,EAAaH,EAAQI,UAAY,GACjCC,EAAYL,EAAQM,aAAa,MACjCjB,EAAUL,SAASW,cAAc,uBAAuBU,OAE1DhB,IACES,EAAUK,GAAcL,GAAWK,EAAaF,EAClDZ,EAAQD,UAAUmB,IAAI,eAEtBlB,EAAQD,UAAUI,OAAO,e,GAIjC,CAEA,SAASgB,YACP,MAAMA,EAAYxB,SAASC,eAAe,cAEtCwB,KAAKX,SAAW,IAAKU,EAAUpB,UAAUmB,IAAI,eAC5CC,EAAUpB,UAAUI,OAAO,cAClC,CAxBAO,OAAOZ,iBAAiB,SAAUU,cAyBlCE,OAAOZ,iBAAiB,SAAUqB,WAElC,MAAME,YAAc1B,SAASC,eAAe,gBACtC0B,UAAY,aACZC,UAAY,SAEZC,cAAgBC,aAAaC,QAAQ,kBACrCC,aAAeF,aAAaC,QAAQ,iBAEpCE,gBAAkB,IACtBjC,SAASkC,KAAK9B,UAAU+B,SAASR,WAAa,OAAS,QACnDS,eAAiB,IACrBV,YAAYtB,UAAU+B,SARN,UAQ4B,UAAY,SAqB1D,SAASE,UACPrC,SAASkC,KAAK9B,UAAUmB,IAAI,WAC9B,CAEA,SAASe,cACPtC,SAASkC,KAAK9B,UAAUI,OAAO,WACjC,CAzBIqB,gBAEF7B,SAASkC,KAAK9B,UAA4B,SAAlByB,cAA2B,MAAQ,UACzDF,WAEFD,YAAYtB,UAA2B,YAAjB4B,aAA6B,MAAQ,UAf3C,WAoBlBN,YAAYvB,iBAAiB,SAAS,KAEpCH,SAASkC,KAAK9B,UAAUL,OAAO4B,WAC/BD,YAAYtB,UAAUL,OAvBN,UAyBhB+B,aAAaS,QAAQ,iBAnBrBvC,SAASkC,KAAK9B,UAAU+B,SAASR,WAAa,OAAS,SAoBvDG,aAAaS,QAAQ,gBAlBrBb,YAAYtB,UAAU+B,SARN,UAQ4B,UAAY,SAkBlB,IAYxC,IAAIK,OAASxC,SAASC,eAAe,WACjCwC,aAAezC,SAASC,eAAe,iBAEvCyC,IAAM,CACRC,OAAQ,EACRC,SAAU,oBACVC,MAAO,CAAEC,KAAM,OAAQC,QAAS,KAChCC,YAAa,CAAEC,MAAO,GACtBC,MAAO,CAAEC,OAAQ,SAAUC,YAAa,aAG1C,SAASC,iBACPC,SAASd,OAAQE,IACnB,CAEAD,aAAatC,iBAAiB,SAAS,KAErCkC,UAEAgB,iBAEAE,WAAWjB,YAAa","sources":["src/js/main.js"],"sourcesContent":["/*==================== SHOW MENU ====================*/\nconst showMenu = (toggleId, navId) => {\n  const toggle = document.getElementById(toggleId),\n    nav = document.getElementById(navId);\n\n  // Validate that variables exist\n  if (toggle && nav) {\n    toggle.addEventListener(\"click\", () => {\n      // We add the show-menu class to the div tag with the nav__menu class\n      nav.classList.toggle(\"show-menu\");\n    });\n  }\n};\nshowMenu(\"nav-toggle\", \"nav-menu\");\n/*==================== REMOVE MENU MOBILE ====================*/\nconst navLink = document.querySelectorAll(\".nav__link\");\n\nfunction linkAction() {\n  const navMenu = document.getElementById(\"nav-menu\");\n  // When we click on each nav__link, we remove the show-menu class\n  navMenu.classList.remove(\"show-menu\");\n}\nnavLink.forEach((n) => n.addEventListener(\"click\", linkAction));\n// Бургер\ndocument.querySelector(\".nav__btn\").addEventListener(\"click\", function () {\n  document.querySelector(\".burger\").classList.toggle(\"active\");\n});\n/*==================== SCROLL SECTIONS ACTIVE LINK ====================*/\nconst sections = document.querySelectorAll(\"section[id]\");\nwindow.addEventListener(\"scroll\", scrollActive);\nfunction scrollActive() {\n  const scrollY = window.scrollY;\n  sections.forEach((current) => {\n    const sectionHeight = current.offsetHeight;\n    const sectionTop = current.offsetTop - 50;\n    const sectionId = current.getAttribute(\"id\");\n    const navLink = document.querySelector(`.nav__menu a[href*=\"${sectionId}\"]`);\n\n    if (navLink) {\n      if (scrollY > sectionTop && scrollY <= sectionTop + sectionHeight) {\n        navLink.classList.add(\"active-link\");\n      } else {\n        navLink.classList.remove(\"active-link\");\n      }\n    }\n  });\n}\n/*==================== SHOW SCROLL TOP ====================*/\nfunction scrollTop() {\n  const scrollTop = document.getElementById(\"scroll-top\");\n  // When the scroll is higher than 560 viewport height, add the show-scroll class to the a tag with the scroll-top class\n  if (this.scrollY >= 200) scrollTop.classList.add(\"show-scroll\");\n  else scrollTop.classList.remove(\"show-scroll\");\n}\nwindow.addEventListener(\"scroll\", scrollTop);\n/*==================== DARK LIGHT THEME ====================*/\nconst themeButton = document.getElementById(\"theme-button\");\nconst darkTheme = \"dark-theme\";\nconst iconTheme = \"bx-sun\";\n// Previously selected topic (if user selected)\nconst selectedTheme = localStorage.getItem(\"selected-theme\");\nconst selectedIcon = localStorage.getItem(\"selected-icon\");\n// We obtain the current theme that the interface has by validating the dark-theme class\nconst getCurrentTheme = () =>\n  document.body.classList.contains(darkTheme) ? \"dark\" : \"light\";\nconst getCurrentIcon = () =>\n  themeButton.classList.contains(iconTheme) ? \"bx-moon\" : \"bx-sun\";\n// We validate if the user previously chose a topic\nif (selectedTheme) {\n  // If the validation is fulfilled, we ask what the issue was to know if we activated or deactivated the dark\n  document.body.classList[selectedTheme === \"dark\" ? \"add\" : \"remove\"](\n    darkTheme\n  );\n  themeButton.classList[selectedIcon === \"bx-moon\" ? \"add\" : \"remove\"](\n    iconTheme\n  );\n}\n// Activate / deactivate the theme manually with the button\nthemeButton.addEventListener(\"click\", () => {\n  // Add or remove the dark / icon theme\n  document.body.classList.toggle(darkTheme);\n  themeButton.classList.toggle(iconTheme);\n  // We save the theme and the current icon that the user chose\n  localStorage.setItem(\"selected-theme\", getCurrentTheme());\n  localStorage.setItem(\"selected-icon\", getCurrentIcon());\n});\n/*==================== REDUCE THE SIZE AND PRINT ON AN A4 SHEET ====================*/\nfunction scaleCv() {\n  document.body.classList.add(\"scale-cv\");\n}\n/*==================== REMOVE THE SIZE WHEN THE CV IS DOWNLOADED ====================*/\nfunction removeScale() {\n  document.body.classList.remove(\"scale-cv\");\n}\n/*==================== GENERATE PDF ====================*/\n// PDF generated area\nlet areaCv = document.getElementById(\"area-cv\");\nlet resumeButton = document.getElementById(\"resume-button\");\n// Html2pdf options\nlet opt = {\n  margin: 0,\n  filename: \"Resume_Pishta.pdf\",\n  image: { type: \"jpeg\", quality: 0.98 },\n  html2canvas: { scale: 4 },\n  jsPDF: { format: \"letter\", orientation: \"portrait\" },\n};\n// Function to call areaCv and Html2Pdf options\nfunction generateResume() {\n  html2pdf(areaCv, opt);\n}\n// When the button is clicked, it executes the three functions\nresumeButton.addEventListener(\"click\", () => {\n  // 1. The class .scale-cv is added to the body, where it reduces the size of the elements\n  scaleCv();\n  // 2. The PDF is generated\n  generateResume();\n  // 3. The .scale-cv class is removed from the body after 5 seconds to return to normal size.\n  setTimeout(removeScale, 5000);\n});\n"],"names":["showMenu","toggleId","navId","toggle","document","getElementById","nav","addEventListener","classList","navLink","querySelectorAll","linkAction","remove","forEach","n","querySelector","sections","scrollActive","scrollY","window","current","sectionHeight","offsetHeight","sectionTop","offsetTop","sectionId","getAttribute","add","scrollTop","this","themeButton","darkTheme","iconTheme","selectedTheme","localStorage","getItem","selectedIcon","getCurrentTheme","body","contains","getCurrentIcon","scaleCv","removeScale","setItem","areaCv","resumeButton","opt","margin","filename","image","type","quality","html2canvas","scale","jsPDF","format","orientation","generateResume","html2pdf","setTimeout"],"version":3,"file":"index.bf9b0ba6.js.map"}